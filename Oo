#import <SceneKit/SceneKit.h>

@interface ViewController : UIViewController
@property (nonatomic, strong) SCNView *sceneView;
@property (nonatomic, strong) SCNNode *cameraNode;
@property (nonatomic, strong) NSMutableArray<SCNNode *> *waypoints;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // 初始化SceneKit视图
    self.sceneView = [[SCNView alloc] initWithFrame:self.view.bounds];
    self.sceneView.scene = [SCNScene scene];
    [self.view addSubview:self.sceneView];
    
    // 创建相机节点
    self.cameraNode = [SCNNode node];
    self.cameraNode.camera = [SCNCamera camera];
    [self.sceneView.scene.rootNode addChildNode:self.cameraNode];
    
    // 创建轨迹线上的点集合
    NSArray<SCNVector3> *pathPoints = @[
        SCNVector3Make(0, 0, 0),
        SCNVector3Make(10, 10, 10),
        // ... 添加更多的点
    ];
    
    // 在每个点上放置一个路标
    self.waypoints = [NSMutableArray array];
    for (SCNVector3 point in pathPoints) {
        SCNNode *waypoint = [SCNNode nodeWithGeometry:[SCNSphere sphereWithRadius:1.0]];
        waypoint.position = point;
        [self.sceneView.scene.rootNode addChildNode:waypoint];
        [self.waypoints addObject:waypoint];
    }
    
    // 开始动画
    [self startAnimation];
}

- (void)startAnimation {
    // 移动相机的动画
    SCNAction *moveCamera = [SCNAction followPath:[self pathFromWaypoints] asOffset:NO orientToPath:YES duration:10.0];
    [self.cameraNode runAction:moveCamera];
    
    // 刷新路标的动画
    for (SCNNode *waypoint in self.waypoints) {
        SCNAction *moveWaypoint = [SCNAction moveTo:waypoint.position duration:0.5];
        SCNAction *removeWaypoint = [SCNAction removeFromParentNode];
        SCNAction *sequence = [SCNAction sequence:@[moveWaypoint, removeWaypoint]];
        [waypoint runAction:sequence];
    }
}

- (CGPathRef)pathFromWaypoints {
    UIBezierPath *path = [UIBezierPath bezierPath];
    for (int i = 0; i < self.waypoints.count; i++) {
        SCNNode *waypoint = self.waypoints[i];
        if (i == 0) {
            [path moveToPoint:CGPointMake(waypoint.position.x, waypoint.position.y)];
        } else {
            [path addLineToPoint:CGPointMake(waypoint.position.x, waypoint.position.y)];
        }
    }
    return path.CGPath;
}

@end


如果模型背对着您，那么可能是模型的前方（通常是Z轴）与您期望的方向不匹配。此外，左右倾斜可能是由于`lookAt`方法使模型的上方（Y轴）尝试与世界坐标的Y轴对齐所导致的。

为了修正这些问题，您可以采取以下步骤：

1. **修正模型的朝向**：您可以通过旋转模型来确保其正面朝向您期望的方向。

2. **设置模型的上方**：使用`lookAt:up:localFront:`方法来明确指定模型的上方和前方。

以下是如何实现这些修正的代码示例：

```objc
// 在renderer:updateAtTime:方法中更新模型的朝向
- (void)renderer:(id<SCNSceneRenderer>)renderer updateAtTime:(NSTimeInterval)time {
    // ... 其他代码 ...

    // 遍历场景中的所有模型节点，并使它们朝向相机
    [self.sceneView.scene.rootNode.childNodes enumerateObjectsUsingBlock:^(SCNNode * _Nonnull node, NSUInteger idx, BOOL * _Nonnull stop) {
        if ([node.geometry isKindOfClass:[SCNBox class]]) { // 这里只是一个示例，您应该根据您的模型来判断

            // 明确指定模型的上方和前方
            SCNVector3 upDirection = SCNVector3Make(0, 1, 0); // 世界坐标的Y轴
            SCNVector3 frontDirection = SCNVector3Make(0, 0, 1); // 模型的前方，这可能需要根据您的模型进行调整

            [node lookAt:self.cameraNode.position up:upDirection localFront:frontDirection];
        }
    }];
}
```

请注意，您可能需要调整`frontDirection`来确保模型的正面朝向您期望的方向。这取决于模型的初始方向。

希望这可以帮助您修正模型的方向！
